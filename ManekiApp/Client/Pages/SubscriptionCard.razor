@page "/subscription"
@using System.Text
@using ManekiApp.Server.Models.ManekiAppDB
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<RadzenCard>
    <RadzenText TextStyle="TextStyle.Body1" Style="font-size: 20px">
        <b>@TierName</b>
    </RadzenText>

    <RadzenText TextStyle="TextStyle.Body1" Style="font-size: 16px; font-weight: 500">
        Support us with <b style="font-size: 22px">@(Price)$</b>/month
    </RadzenText>

    <RadzenText TextStyle="TextStyle.Body1" Style="font-size: 17px">
        @Description
    </RadzenText>
    <RadzenButton Text="Subscribe" Click="@(() => SubscribeClicked())" Visible="@ShowButtons" Style="border-radius: 10px; border: 1px solid #3e633f;"/>
</RadzenCard>

@code {
    [Parameter] public bool ShowButtons { get; set; }
    [Parameter] public string TierName { get; set; }
    [Parameter] public decimal Price { get; set; }
    [Parameter] public Guid SubscriptionId { get; set; }
    [Parameter] public IEnumerable<Subscription> Subscriptions { get; set; }
    [Parameter] public string UserId { get; set; }
    [Parameter] public string Description { get; set; }
    [Inject] protected ManekiAppDBService ManekiAppDb { get; set; }
    [Inject] public SecurityService SecurityService { get; set; }
    private string CurrentPlanName { get; set; }
    private async Task SubscribeClicked()
    {
        if (!IsUserAuthenticated())
        {
            RedirectToLogin();
            return;
        }

        var currentUserId = GetCurrentUserId();
        if (!await IsTelegramConfirmed(currentUserId))
        {
            return;
        }

        var currentPlan = await GetCurrentPlan(currentUserId);
        if (currentPlan == null)
        {
            await HandleNoCurrentPlan(currentUserId);
            return;
        }

        var currentSubscription = await ManekiAppDb.GetSubscriptionById(id: currentPlan.SubscriptionId);
        CurrentPlanName = currentSubscription.Title;

        if (IsFreePlan())
        {
            await HandleFreePlanSubscription(currentUserId, currentPlan);
        }
        else
        {
            await HandlePaidPlanSubscription(currentPlan);
        }
    }

    private async Task HandleNoCurrentPlan(string currentUserId)
    {
        if (IsFreePlan())
        {
            await ProcessFreeUser(currentUserId);
        }
        else
        {
            await OpenSubscriptionUrl();
        }
    }

    private async Task<bool> IsTelegramConfirmed(string currentUserId)
    {
        var user = await SecurityService.GetUserById(currentUserId);
        if (!user.TelegramConfirmed)
        {
            await DialogService.OpenAsync("Telegram Confirmation Required",
                ds =>
                    @<div>
                        <p Style="margin-bottom: 1rem">You need to confirm your Telegram account to subscribe to a plan.</p>
                        <div class="row">
                            <div class="col-md-12">
                                <RadzenButton Text="OK" Click="() => ds.Close()" Style="margin-bottom: 10px; width: 150px"/>
                </div>
                </div>
                </div>);
            //when user close dialog navigate to settings page
            NavigationManager.NavigateTo("settings");
            return false;
        }
        return true;


    }
    private bool IsUserAuthenticated()
    {
        return SecurityService.IsAuthenticated();
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("login");
    }

    private string GetCurrentUserId()
    {
        return SecurityService.User.Id;
    }

    private bool IsFreePlan()
    {
        return Price <= 0;
    }

    private async Task HandleFreePlanSubscription(string currentUser, UserSubscription currentPlan)
    {
        if (ShouldConfirmFreePlanChange(currentPlan))
        {
            var result = await ShowConfirmFreePlanDialog();
            if (result)
            {
                await ProcessFreeUser(currentUser);
            }
        }
        else
        {
            await ProcessFreeUser(currentUser);
        }
    }

    private bool ShouldConfirmFreePlanChange(UserSubscription currentPlan)
    {
        return currentPlan != null && currentPlan.SubscriptionId != SubscriptionId;
    }

    private async Task HandlePaidPlanSubscription(UserSubscription currentPlan)
    {
        if (ShouldConfirmPlanChange(currentPlan))
        {
            var result = await ShowConfirmPlanChangeDialog();
            if (result)
            {
                await OpenSubscriptionUrl();
            }
        }
        else
        {
            await OpenSubscriptionUrl();
        }
    }

    private bool ShouldConfirmPlanChange(UserSubscription currentPlan)
    {
        return currentPlan == null || currentPlan.SubscriptionId != SubscriptionId;
    }

    private async Task OpenSubscriptionUrl()
    {
        var url = $"https://t.me/maneki_pay_bot?start=subscription{SubscriptionId}";
        await JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }


    private async Task<bool> ShowConfirmFreePlanDialog()
    {
        return await DialogService.OpenAsync("Confirm Free Plan Change",
            ds =>
                @<div>
                    <p Style="margin-bottom: 1rem">Are you sure you want to switch to the free plan?</p>
                    <div class="row">
                        <div class="col-md-12">
                            <RadzenButton Text="Yes" Click="() => { ds.Close(true); }" Style="margin-bottom: 10px; width: 150px"/>
                            <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px"/>
            </div>
            </div>
            </div>);
    }

    private async Task<bool> ShowConfirmPlanChangeDialog()
    {
        return await DialogService.OpenAsync("Confirm Plan Change",
            ds =>
                @<div>
                    <p Style="margin-bottom: 1rem">Are you sure you want to change your subscription plan? (@CurrentPlanName to @TierName)</p>
                    <div class="row">
                        <div class="col-md-12">
                            <RadzenButton Text="Yes" Click="() => { ds.Close(true); }" Style="margin-bottom: 10px; width: 150px"/>
                            <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px"/>
            </div>
            </div>
            </div>);
    }

    private async Task ProcessFreeUser(string currentUser)
    {
        var currentPlan = await GetCurrentPlan(currentUser);
        if (currentPlan != null)
        {
            currentPlan.SubscriptionId = SubscriptionId;
            currentPlan.EndsAt = DateTime.UtcNow.AddMonths(1);
            await ManekiAppDb.UpdateUserSubscription(currentPlan.Id, currentPlan);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "You have successfully subscribed to the free plan.");
        }
        else
        {
            var newUserSubscription = new UserSubscription
            {
                Id = Guid.NewGuid(),
                SubscriptionId = SubscriptionId,
                UserId = currentUser,
                SubscribedAt = DateTime.UtcNow,
                EndsAt = DateTime.UtcNow.AddMonths(1),
                ReceiveNotifications = true,
                IsCanceled = false
            };
            await ManekiAppDb.CreateUserSubscription(newUserSubscription);
            HttpClient client = new HttpClient();
            var json = JsonConvert.SerializeObject(newUserSubscription);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await client.PostAsync("https://localhost:5004/setJobIdForFreeSub", content);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "You have successfully subscribed to the free plan.");

        }
    }

    private async Task<UserSubscription> GetCurrentPlan(string userId)
    {   
        var userSubsFilter = string.Join(" or ", Subscriptions.Select(s => $"(SubscriptionId eq {s.Id} and UserId eq '{userId}')"));
        var userPlanOData = await ManekiAppDb.GetUserSubscriptions(userSubsFilter);
        var userPlan = userPlanOData.Value.FirstOrDefault();
        return userPlan;
    }



}